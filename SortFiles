package order;

import java.awt.Desktop;
import java.io.File;
import java.util.StringTokenizer;

/**
 * @author Saksham Chitkara
 *
 */
public class SortFiles {

	public static void main(String[] args) {

		/*
		 * Get the files from the directory.
		 */
		try {
			// BufferedReader br = new BufferedReader(new InputStreamReader(
			// System.in));

			// Double \\ or /
			String directory = "H:\\Movies\\TV Series\\Person Of Interest\\POI SESSION1";
			System.out.println("Enter the directory");
			// directory = br.readLine();
			File dir = new File(directory);
			System.out.println(dir.getName());
		
			if (dir.isDirectory()) {
				String li[] = dir.list();
				for (String k : li) {
					File f = new File(directory + "/" + k);
					System.out.print(k);
					if (f.isFile()) {
						System.out.println(": is a file ");
						String fileName = f.getName();

						StringTokenizer stz = new StringTokenizer(fileName, ".");
						String newName = "", newExt = "";
						// So that the only '.' present is not of the extension
						// Removing the '.' delimiter is not required
            
            
            //Depending from folder to folder
						int nameCount = 0;
						if(stz.countTokens() > 2){
							while (stz.countTokens() > 2) {
								// default name
								String defName = stz.nextToken();
								Character chObj = new Character(defName.charAt(0));
								
								//Capitalizing the 1st letter
								if (Character.isLowerCase(chObj)) {
									StringBuffer tbuf = new StringBuffer(defName);
									tbuf.replace(0, 1, chObj.toString()
											.toUpperCase());
									//3 for show name and 1 for the episode name
									if (nameCount++ < 4) {
										newName += tbuf + " ";
									}
								} else if (Character.isUpperCase(chObj)) {
									if (nameCount++ < 4) {
										newName += defName + " ";
									}
								} else if (Character.isDigit(chObj)){

									if(nameCount++<4){
										newName += "S0"+defName.charAt(0);
										newName +="E";
										for(int iti = 1 ; iti<defName.length() ; ++iti)
											newName +=defName.charAt(iti); 
									}
								}

							}
						} 

						else
							continue;
						//Dont rename the file
						newName=newName.trim();

						StringTokenizer getExt = new StringTokenizer(fileName,
								".");
						while (getExt.hasMoreTokens()) {
							newExt = getExt.nextToken();
						}

						System.out.println(newName + "." + newExt);
						boolean renameSuccessful = false;
						renameSuccessful = f.renameTo(new File(directory + "\\"
								+ newName + "." + newExt));

						System.out.println(renameSuccessful);
						while (renameSuccessful == false) {
							int count = 1;
							renameSuccessful = f.renameTo(new File(directory
									+ "\\" + newName + " (" + count + ")."
									+ newExt));
							++count;
							if (count == 10)
								break;
							// TimeOut
						}

					} else
						System.out.println(": is a directory");
				}
			}
			Desktop.getDesktop().open(new File(directory));
			System.out.println("Complete");

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
